{:paths ["src"]
 :tasks
 {:requires ([bb-godot.tasks :as tasks])

  :init
  (do
    (def gut "godot --no-window --debug-collisions --path $PWD -d -s addons/gut/gut_cmdln.gd ")
    (def gut-with-window "godot --debug-collisions --path $PWD -d -s addons/gut/gut_cmdln.gd ")

    (def addons-map
      {:gut                 :bitwes/Gut
       :lospec_palette_list :hiulit/Lospec-Palette-List
       :MaxSizeContainer    :MattUV/godot-MaxSizeContainer
       :inkgd               :ephread/inkgd}))

  test-with-window  (tasks/shell-and-log (str gut-with-window " -gexit"))
  test              (tasks/shell-and-log (str gut " -gexit"))
  test-match        (let [arg (some-> *command-line-args* first)]
                      (tasks/shell-and-log (str gut " -gexit -gunit_test_name=" arg)))
  test-match-script (let [arg (some-> *command-line-args* first)]
                      (tasks/shell-and-log (str gut " -gexit -gselect=" arg)))

  watch          tasks/watch
  watch-reptile  (tasks/watch "addons/reptile/assets")
  watch-core     (tasks/watch "addons/core/assets")
  pixels         tasks/pixels
  pixels-reptile (tasks/pixels "addons/reptile/assets")
  pixels-core (tasks/pixels "addons/core/assets")
  build-web      tasks/build-web
  deploy-web     (tasks/deploy-web "s3://<some-bucket-name>")
  zip            tasks/zip

  install-script-templates
  (tasks/install-script-templates
    #{"kagenash1/godot-behavior-tree/script_templates"})

  addons         (tasks/addons addons-map)
  addons-install (tasks/install-addons addons-map)
  addons-clone   (tasks/clone-addons addons-map)}}
